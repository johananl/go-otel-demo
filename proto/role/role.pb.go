// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/role/role.proto

package role

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RoleRequest struct {
	Slow                 bool     `protobuf:"varint,1,opt,name=slow,proto3" json:"slow,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoleRequest) Reset()         { *m = RoleRequest{} }
func (m *RoleRequest) String() string { return proto.CompactTextString(m) }
func (*RoleRequest) ProtoMessage()    {}
func (*RoleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26e011caf756e89c, []int{0}
}

func (m *RoleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoleRequest.Unmarshal(m, b)
}
func (m *RoleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoleRequest.Marshal(b, m, deterministic)
}
func (m *RoleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleRequest.Merge(m, src)
}
func (m *RoleRequest) XXX_Size() int {
	return xxx_messageInfo_RoleRequest.Size(m)
}
func (m *RoleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RoleRequest proto.InternalMessageInfo

func (m *RoleRequest) GetSlow() bool {
	if m != nil {
		return m.Slow
	}
	return false
}

type RoleReply struct {
	Role                 string   `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoleReply) Reset()         { *m = RoleReply{} }
func (m *RoleReply) String() string { return proto.CompactTextString(m) }
func (*RoleReply) ProtoMessage()    {}
func (*RoleReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_26e011caf756e89c, []int{1}
}

func (m *RoleReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoleReply.Unmarshal(m, b)
}
func (m *RoleReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoleReply.Marshal(b, m, deterministic)
}
func (m *RoleReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleReply.Merge(m, src)
}
func (m *RoleReply) XXX_Size() int {
	return xxx_messageInfo_RoleReply.Size(m)
}
func (m *RoleReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleReply.DiscardUnknown(m)
}

var xxx_messageInfo_RoleReply proto.InternalMessageInfo

func (m *RoleReply) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func init() {
	proto.RegisterType((*RoleRequest)(nil), "role.RoleRequest")
	proto.RegisterType((*RoleReply)(nil), "role.RoleReply")
}

func init() { proto.RegisterFile("proto/role/role.proto", fileDescriptor_26e011caf756e89c) }

var fileDescriptor_26e011caf756e89c = []byte{
	// 130 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2d, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0xca, 0xcf, 0x49, 0x05, 0x13, 0x7a, 0x60, 0xbe, 0x10, 0x0b, 0x88, 0xad, 0xa4,
	0xc8, 0xc5, 0x1d, 0x94, 0x9f, 0x93, 0x1a, 0x94, 0x5a, 0x58, 0x9a, 0x5a, 0x5c, 0x22, 0x24, 0xc4,
	0xc5, 0x52, 0x9c, 0x93, 0x5f, 0x2e, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x11, 0x04, 0x66, 0x2b, 0xc9,
	0x73, 0x71, 0x42, 0x94, 0x14, 0xe4, 0x54, 0x82, 0x14, 0x80, 0xf4, 0x81, 0x15, 0x70, 0x06, 0x81,
	0xd9, 0x46, 0xe6, 0x5c, 0x2c, 0x20, 0x05, 0x42, 0xfa, 0x5c, 0xec, 0xee, 0xa9, 0x25, 0x60, 0xa6,
	0xa0, 0x1e, 0xd8, 0x26, 0x24, 0xa3, 0xa5, 0xf8, 0x91, 0x85, 0x0a, 0x72, 0x2a, 0x95, 0x18, 0x92,
	0xd8, 0xc0, 0x2e, 0x31, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xc7, 0x86, 0xc0, 0xd0, 0xa2, 0x00,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RoleClient is the client API for Role service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RoleClient interface {
	GetRole(ctx context.Context, in *RoleRequest, opts ...grpc.CallOption) (*RoleReply, error)
}

type roleClient struct {
	cc *grpc.ClientConn
}

func NewRoleClient(cc *grpc.ClientConn) RoleClient {
	return &roleClient{cc}
}

func (c *roleClient) GetRole(ctx context.Context, in *RoleRequest, opts ...grpc.CallOption) (*RoleReply, error) {
	out := new(RoleReply)
	err := c.cc.Invoke(ctx, "/role.Role/GetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleServer is the server API for Role service.
type RoleServer interface {
	GetRole(context.Context, *RoleRequest) (*RoleReply, error)
}

// UnimplementedRoleServer can be embedded to have forward compatible implementations.
type UnimplementedRoleServer struct {
}

func (*UnimplementedRoleServer) GetRole(ctx context.Context, req *RoleRequest) (*RoleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}

func RegisterRoleServer(s *grpc.Server, srv RoleServer) {
	s.RegisterService(&_Role_serviceDesc, srv)
}

func _Role_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/role.Role/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServer).GetRole(ctx, req.(*RoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Role_serviceDesc = grpc.ServiceDesc{
	ServiceName: "role.Role",
	HandlerType: (*RoleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRole",
			Handler:    _Role_GetRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/role/role.proto",
}
